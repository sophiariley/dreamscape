/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 * @format
 */
<<<<<<< HEAD
<<<<<<< HEAD

'use strict';

const invariant = require('invariant');
=======
'use strict';

const invariant = require('invariant');

>>>>>>> origin/Sophia's-branch
=======
'use strict';

const invariant = require('invariant');

>>>>>>> origin
function createAliasResolver(aliasMap) {
  return aliasName => {
    const alias = aliasMap[aliasName];
    invariant(alias != null, `Unable to resolve type alias '${aliasName}'.`);
    return alias;
  };
}
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
function getModules(schema) {
  return Object.keys(schema.modules).reduce((modules, hasteModuleName) => {
    const module = schema.modules[hasteModuleName];
    if (module == null || module.type === 'Component') {
      return modules;
    }
=======

<<<<<<< HEAD
function getModules(schema) {
  return Object.keys(schema.modules).reduce((modules, hasteModuleName) => {
    const module = schema.modules[hasteModuleName];

    if (module == null || module.type === 'Component') {
      return modules;
    }

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
    modules[hasteModuleName] = module;
    return modules;
  }, {});
}
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
module.exports = {
  createAliasResolver,
  getModules,
};
