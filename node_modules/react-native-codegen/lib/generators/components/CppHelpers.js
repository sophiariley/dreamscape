/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 * @format
 */
<<<<<<< HEAD

=======
>>>>>>> origin/Sophia's-branch
'use strict';

function upperCaseFirst(inString) {
  if (inString.length === 0) {
    return inString;
  }
<<<<<<< HEAD
  return inString[0].toUpperCase() + inString.slice(1);
}
function toSafeCppString(input) {
  return input.split('-').map(upperCaseFirst).join('');
}
function toIntEnumValueName(propName, value) {
  return `${toSafeCppString(propName)}${value}`;
}
=======

  return inString[0].toUpperCase() + inString.slice(1);
}

function toSafeCppString(input) {
  return input.split('-').map(upperCaseFirst).join('');
}

function toIntEnumValueName(propName, value) {
  return `${toSafeCppString(propName)}${value}`;
}

>>>>>>> origin/Sophia's-branch
function getCppTypeForAnnotation(type) {
  switch (type) {
    case 'BooleanTypeAnnotation':
      return 'bool';
<<<<<<< HEAD
    case 'StringTypeAnnotation':
      return 'std::string';
    case 'Int32TypeAnnotation':
      return 'int';
    case 'DoubleTypeAnnotation':
      return 'double';
    case 'FloatTypeAnnotation':
      return 'Float';
=======

    case 'StringTypeAnnotation':
      return 'std::string';

    case 'Int32TypeAnnotation':
      return 'int';

    case 'DoubleTypeAnnotation':
      return 'double';

    case 'FloatTypeAnnotation':
      return 'Float';

>>>>>>> origin/Sophia's-branch
    default:
      type;
      throw new Error(`Received invalid typeAnnotation ${type}`);
  }
}
<<<<<<< HEAD
function getImports(properties) {
  const imports = new Set();
=======

function getImports(properties) {
  const imports = new Set();

>>>>>>> origin/Sophia's-branch
  function addImportsForNativeName(name) {
    switch (name) {
      case 'ColorPrimitive':
        return;
<<<<<<< HEAD
      case 'PointPrimitive':
        return;
      case 'EdgeInsetsPrimitive':
        return;
      case 'ImageSourcePrimitive':
        imports.add('#include <react/renderer/components/image/conversions.h>');
        return;
=======

      case 'PointPrimitive':
        return;

      case 'EdgeInsetsPrimitive':
        return;

      case 'ImageSourcePrimitive':
        imports.add('#include <react/renderer/components/image/conversions.h>');
        return;

>>>>>>> origin/Sophia's-branch
      default:
        name;
        throw new Error(`Invalid name, got ${name}`);
    }
  }
<<<<<<< HEAD
  properties.forEach(prop => {
    const typeAnnotation = prop.typeAnnotation;
    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {
      addImportsForNativeName(typeAnnotation.name);
    }
=======

  properties.forEach(prop => {
    const typeAnnotation = prop.typeAnnotation;

    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {
      addImportsForNativeName(typeAnnotation.name);
    }

>>>>>>> origin/Sophia's-branch
    if (
      typeAnnotation.type === 'ArrayTypeAnnotation' &&
      typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation'
    ) {
      addImportsForNativeName(typeAnnotation.elementType.name);
    }
<<<<<<< HEAD
    if (typeAnnotation.type === 'ObjectTypeAnnotation') {
      const objectImports = getImports(typeAnnotation.properties);
      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
=======

    if (typeAnnotation.type === 'ObjectTypeAnnotation') {
      const objectImports = getImports(typeAnnotation.properties); // $FlowFixMe[method-unbinding] added when improving typing for this parameters

>>>>>>> origin/Sophia's-branch
      objectImports.forEach(imports.add, imports);
    }
  });
  return imports;
}
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
function generateEventStructName(parts = []) {
  const additional = parts.map(toSafeCppString).join('');
  return `${additional}`;
}
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
function generateStructName(componentName, parts = []) {
  const additional = parts.map(toSafeCppString).join('');
  return `${componentName}${additional}Struct`;
}
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
function getEnumName(componentName, propName) {
  const uppercasedPropName = toSafeCppString(propName);
  return `${componentName}${uppercasedPropName}`;
}
<<<<<<< HEAD
function getEnumMaskName(enumName) {
  return `${enumName}Mask`;
}
function convertDefaultTypeToString(componentName, prop) {
  const typeAnnotation = prop.typeAnnotation;
=======

function getEnumMaskName(enumName) {
  return `${enumName}Mask`;
}

function convertDefaultTypeToString(componentName, prop) {
  const typeAnnotation = prop.typeAnnotation;

>>>>>>> origin/Sophia's-branch
  switch (typeAnnotation.type) {
    case 'BooleanTypeAnnotation':
      if (typeAnnotation.default == null) {
        return '';
      }
<<<<<<< HEAD
      return String(typeAnnotation.default);
=======

      return String(typeAnnotation.default);

>>>>>>> origin/Sophia's-branch
    case 'StringTypeAnnotation':
      if (typeAnnotation.default == null) {
        return '';
      }
<<<<<<< HEAD
      return `"${typeAnnotation.default}"`;
    case 'Int32TypeAnnotation':
      return String(typeAnnotation.default);
=======

      return `"${typeAnnotation.default}"`;

    case 'Int32TypeAnnotation':
      return String(typeAnnotation.default);

>>>>>>> origin/Sophia's-branch
    case 'DoubleTypeAnnotation':
      const defaultDoubleVal = typeAnnotation.default;
      return parseInt(defaultDoubleVal, 10) === defaultDoubleVal
        ? typeAnnotation.default.toFixed(1)
        : String(typeAnnotation.default);
<<<<<<< HEAD
    case 'FloatTypeAnnotation':
      const defaultFloatVal = typeAnnotation.default;
      if (defaultFloatVal == null) {
        return '';
      }
      return parseInt(defaultFloatVal, 10) === defaultFloatVal
        ? defaultFloatVal.toFixed(1)
        : String(typeAnnotation.default);
=======

    case 'FloatTypeAnnotation':
      const defaultFloatVal = typeAnnotation.default;

      if (defaultFloatVal == null) {
        return '';
      }

      return parseInt(defaultFloatVal, 10) === defaultFloatVal
        ? defaultFloatVal.toFixed(1)
        : String(typeAnnotation.default);

>>>>>>> origin/Sophia's-branch
    case 'ReservedPropTypeAnnotation':
      switch (typeAnnotation.name) {
        case 'ColorPrimitive':
          return '';
<<<<<<< HEAD
        case 'ImageSourcePrimitive':
          return '';
        case 'PointPrimitive':
          return '';
        case 'EdgeInsetsPrimitive':
          return '';
=======

        case 'ImageSourcePrimitive':
          return '';

        case 'PointPrimitive':
          return '';

        case 'EdgeInsetsPrimitive':
          return '';

>>>>>>> origin/Sophia's-branch
        default:
          typeAnnotation.name;
          throw new Error(
            `Unsupported type annotation: ${typeAnnotation.name}`,
          );
      }
<<<<<<< HEAD
    case 'ArrayTypeAnnotation': {
      const elementType = typeAnnotation.elementType;
=======

    case 'ArrayTypeAnnotation': {
      const elementType = typeAnnotation.elementType;

>>>>>>> origin/Sophia's-branch
      switch (elementType.type) {
        case 'StringEnumTypeAnnotation':
          if (elementType.default == null) {
            throw new Error(
              'A default is required for array StringEnumTypeAnnotation',
            );
          }
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
          const enumName = getEnumName(componentName, prop.name);
          const enumMaskName = getEnumMaskName(enumName);
          const defaultValue = `${enumName}::${toSafeCppString(
            elementType.default,
          )}`;
          return `static_cast<${enumMaskName}>(${defaultValue})`;
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
        default:
          return '';
      }
    }
<<<<<<< HEAD
    case 'ObjectTypeAnnotation': {
      return '';
    }
=======

    case 'ObjectTypeAnnotation': {
      return '';
    }

>>>>>>> origin/Sophia's-branch
    case 'StringEnumTypeAnnotation':
      return `${getEnumName(componentName, prop.name)}::${toSafeCppString(
        typeAnnotation.default,
      )}`;
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
    case 'Int32EnumTypeAnnotation':
      return `${getEnumName(componentName, prop.name)}::${toIntEnumValueName(
        prop.name,
        typeAnnotation.default,
      )}`;
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
    default:
      typeAnnotation;
      throw new Error(`Unsupported type annotation: ${typeAnnotation.type}`);
  }
}
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
module.exports = {
  convertDefaultTypeToString,
  getCppTypeForAnnotation,
  getEnumName,
  getEnumMaskName,
  getImports,
  toSafeCppString,
  toIntEnumValueName,
  generateStructName,
  generateEventStructName,
};
