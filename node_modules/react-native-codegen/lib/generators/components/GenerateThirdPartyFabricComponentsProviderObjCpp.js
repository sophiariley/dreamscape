/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 * @format
 */
<<<<<<< HEAD
<<<<<<< HEAD

'use strict';

// File path -> contents

=======
'use strict';

// File path -> contents
>>>>>>> origin/Sophia's-branch
=======
'use strict';

// File path -> contents
>>>>>>> origin
const FileTemplate = ({lookupMap}) => `
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * ${'@'}generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
 */

// OSS-compatibility layer

#import "RCTThirdPartyFabricComponentsProvider.h"

#import <string>
#import <unordered_map>

Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
${lookupMap}
  };

  auto p = sFabricComponentsClassMap.find(name);
  if (p != sFabricComponentsClassMap.end()) {
    auto classFunc = p->second;
    return classFunc();
  }
  return nil;
}
`;
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
const LookupMapTemplate = ({className, libraryName}) => `
    {"${className}", ${className}Cls}, // ${libraryName}`;
=======

<<<<<<< HEAD
const LookupMapTemplate = ({className, libraryName}) => `
    {"${className}", ${className}Cls}, // ${libraryName}`;

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
module.exports = {
  generate(schemas) {
    const fileName = 'RCTThirdPartyFabricComponentsProvider.mm';
    const lookupMap = Object.keys(schemas)
      .map(libraryName => {
        const schema = schemas[libraryName];
        return Object.keys(schema.modules)
          .map(moduleName => {
            const module = schema.modules[moduleName];
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
            if (module.type !== 'Component') {
              return;
            }
            const components = module.components;
            // No components in this module
            if (components == null) {
              return null;
            }
            const componentTemplates = Object.keys(components)
=======

<<<<<<< HEAD
            if (module.type !== 'Component') {
              return;
            }

            const components = module.components; // No components in this module

            if (components == null) {
              return null;
            }

            return Object.keys(components)
>>>>>>> origin/Sophia's-branch
=======
            return Object.keys(components)
>>>>>>> origin
              .filter(componentName => {
                const component = components[componentName];
                return !(
                  component.excludedPlatforms &&
                  component.excludedPlatforms.includes('iOS')
                );
              })
              .map(componentName => {
                const replacedTemplate = LookupMapTemplate({
                  className: componentName,
                  libraryName,
                });
                return replacedTemplate;
              });
<<<<<<< HEAD
<<<<<<< HEAD
            return componentTemplates.length > 0 ? componentTemplates : null;
=======
>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
          })
          .filter(Boolean);
      })
      .join('\n');
    const replacedTemplate = FileTemplate({
      lookupMap,
    });
    return new Map([[fileName, replacedTemplate]]);
  },
};
