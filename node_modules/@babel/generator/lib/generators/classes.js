"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClassAccessorProperty = ClassAccessorProperty;
exports.ClassBody = ClassBody;
exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
exports.ClassMethod = ClassMethod;
exports.ClassPrivateMethod = ClassPrivateMethod;
exports.ClassPrivateProperty = ClassPrivateProperty;
exports.ClassProperty = ClassProperty;
exports.StaticBlock = StaticBlock;
exports._classMethodHead = _classMethodHead;
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
var _t = require("@babel/types");
=======

<<<<<<< HEAD
var _t = require("@babel/types");

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
const {
  isExportDefaultDeclaration,
  isExportNamedDeclaration
} = _t;
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
function ClassDeclaration(node, parent) {
  {
    if (!this.format.decoratorsBeforeExport || !isExportDefaultDeclaration(parent) && !isExportNamedDeclaration(parent)) {
      this.printJoin(node.decorators, node);
    }
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  if (node.declare) {
    this.word("declare");
    this.space();
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  if (node.abstract) {
    this.word("abstract");
    this.space();
  }
<<<<<<< HEAD
<<<<<<< HEAD
  this.word("class");
=======
=======
>>>>>>> origin

  this.word("class");
  this.printInnerComments(node);

<<<<<<< HEAD
>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.id) {
    this.space();
    this.print(node.id, node);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  this.print(node.typeParameters, node);
=======

<<<<<<< HEAD
  this.print(node.typeParameters, node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.superClass) {
    this.space();
    this.word("extends");
    this.space();
    this.print(node.superClass, node);
    this.print(node.superTypeParameters, node);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  if (node.implements) {
    this.space();
    this.word("implements");
    this.space();
    this.printList(node.implements, node);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  this.space();
  this.print(node.body, node);
}
function ClassBody(node) {
  this.tokenChar(123);
=======

<<<<<<< HEAD
  this.space();
  this.print(node.body, node);
}

function ClassBody(node) {
  this.tokenChar(123);
  this.printInnerComments(node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.body.length === 0) {
    this.tokenChar(125);
  } else {
    this.newline();
    this.indent();
    this.printSequence(node.body, node);
    this.dedent();
    if (!this.endsWith(10)) this.newline();
    this.sourceWithOffset("end", node.loc, 0, -1);
    this.rightBrace();
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
function ClassProperty(node) {
  var _node$key$loc, _node$key$loc$end;
  this.printJoin(node.decorators, node);

  const endLine = (_node$key$loc = node.key.loc) == null ? void 0 : (_node$key$loc$end = _node$key$loc.end) == null ? void 0 : _node$key$loc$end.line;
  if (endLine) this.catchUp(endLine);
  this.tsPrintClassMemberModifiers(node);
=======

<<<<<<< HEAD
function ClassProperty(node) {
  var _node$key$loc, _node$key$loc$end;

  this.printJoin(node.decorators, node);
  const endLine = (_node$key$loc = node.key.loc) == null ? void 0 : (_node$key$loc$end = _node$key$loc.end) == null ? void 0 : _node$key$loc$end.line;
  if (endLine) this.catchUp(endLine);
  this.tsPrintClassMemberModifiers(node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.computed) {
    this.tokenChar(91);
    this.print(node.key, node);
    this.tokenChar(93);
  } else {
    this._variance(node);
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
    this.print(node.key, node);
  }

  if (node.optional) {
    this.tokenChar(63);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  if (node.definite) {
    this.tokenChar(33);
  }
  this.print(node.typeAnnotation, node);
=======

<<<<<<< HEAD
  if (node.definite) {
    this.tokenChar(33);
  }

  this.print(node.typeAnnotation, node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.value) {
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.value, node);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  this.semicolon();
}
function ClassAccessorProperty(node) {
  var _node$key$loc2, _node$key$loc2$end;
  this.printJoin(node.decorators, node);

  const endLine = (_node$key$loc2 = node.key.loc) == null ? void 0 : (_node$key$loc2$end = _node$key$loc2.end) == null ? void 0 : _node$key$loc2$end.line;
  if (endLine) this.catchUp(endLine);

  this.tsPrintClassMemberModifiers(node);
  this.word("accessor", true);
  this.space();
=======

<<<<<<< HEAD
  this.semicolon();
}

function ClassAccessorProperty(node) {
  var _node$key$loc2, _node$key$loc2$end;

  this.printJoin(node.decorators, node);
  const endLine = (_node$key$loc2 = node.key.loc) == null ? void 0 : (_node$key$loc2$end = _node$key$loc2.end) == null ? void 0 : _node$key$loc2$end.line;
  if (endLine) this.catchUp(endLine);
  this.tsPrintClassMemberModifiers(node);
  this.word("accessor");
  this.printInnerComments(node);
  this.space();

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.computed) {
    this.tokenChar(91);
    this.print(node.key, node);
    this.tokenChar(93);
  } else {
    this._variance(node);
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
    this.print(node.key, node);
  }

  if (node.optional) {
    this.tokenChar(63);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  if (node.definite) {
    this.tokenChar(33);
  }
  this.print(node.typeAnnotation, node);
=======

<<<<<<< HEAD
  if (node.definite) {
    this.tokenChar(33);
  }

  this.print(node.typeAnnotation, node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.value) {
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.value, node);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  this.semicolon();
}
function ClassPrivateProperty(node) {
  this.printJoin(node.decorators, node);
=======

<<<<<<< HEAD
  this.semicolon();
}

function ClassPrivateProperty(node) {
  this.printJoin(node.decorators, node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.static) {
    this.word("static");
    this.space();
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  this.print(node.key, node);
  this.print(node.typeAnnotation, node);
=======

<<<<<<< HEAD
  this.print(node.key, node);
  this.print(node.typeAnnotation, node);

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
  if (node.value) {
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.value, node);
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
  this.semicolon();
}
function ClassMethod(node) {
  this._classMethodHead(node);
  this.space();
  this.print(node.body, node);
}
function ClassPrivateMethod(node) {
  this._classMethodHead(node);
  this.space();
  this.print(node.body, node);
}
function _classMethodHead(node) {
  var _node$key$loc3, _node$key$loc3$end;
  this.printJoin(node.decorators, node);

  const endLine = (_node$key$loc3 = node.key.loc) == null ? void 0 : (_node$key$loc3$end = _node$key$loc3.end) == null ? void 0 : _node$key$loc3$end.line;
  if (endLine) this.catchUp(endLine);
  this.tsPrintClassMemberModifiers(node);
  this._methodHead(node);
}
=======

<<<<<<< HEAD
  this.semicolon();
}

function ClassMethod(node) {
  this._classMethodHead(node);

  this.space();
  this.print(node.body, node);
}

function ClassPrivateMethod(node) {
  this._classMethodHead(node);

  this.space();
  this.print(node.body, node);
}

function _classMethodHead(node) {
  var _node$key$loc3, _node$key$loc3$end;

  this.printJoin(node.decorators, node);
  const endLine = (_node$key$loc3 = node.key.loc) == null ? void 0 : (_node$key$loc3$end = _node$key$loc3.end) == null ? void 0 : _node$key$loc3$end.line;
  if (endLine) this.catchUp(endLine);
  this.tsPrintClassMemberModifiers(node);

  this._methodHead(node);
}

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
function StaticBlock(node) {
  this.word("static");
  this.space();
  this.tokenChar(123);
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  if (node.body.length === 0) {
    this.tokenChar(125);
  } else {
    this.newline();
    this.printSequence(node.body, node, {
      indent: true
    });
    this.sourceWithOffset("end", node.loc, 0, -1);
    this.rightBrace();
  }
}

//# sourceMappingURL=classes.js.map
