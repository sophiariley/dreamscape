"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AsyncGenerator;
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
var _OverloadYield = require("OverloadYield");

function AsyncGenerator(gen) {
  var front, back;
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var overloaded = value instanceof _OverloadYield;
      Promise.resolve(overloaded ? value.v : value).then(function (arg) {
        if (overloaded) {
          var nextKey = key === "return" ? "return" : "next";
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
          if (!value.k || arg.done) {
            return resume(nextKey, arg);
          } else {
            arg = gen[nextKey](arg).value;
          }
        }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
      case "throw":
        front.reject(value);
        break;
=======

<<<<<<< HEAD
      case "throw":
        front.reject(value);
        break;

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
    front = front.next;
=======

<<<<<<< HEAD
    front = front.next;

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin/Sophia's-branch
=======

>>>>>>> origin
  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> origin
AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
};
AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};
AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};
=======

<<<<<<< HEAD
AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
};

AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

>>>>>>> origin/Sophia's-branch
=======
>>>>>>> origin
AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

//# sourceMappingURL=AsyncGenerator.js.map
